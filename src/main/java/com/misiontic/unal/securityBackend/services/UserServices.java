package com.misiontic.unal.securityBackend.services;

/*
 * Copyright: Copyright (c) 2022
 *
 * License
 *
 * Copyright (c) 2022 by Carlos Andres Sierra Virg√ºez.
 * All rights reserved.
 *
 * This file is part of Academic #MisionTIC2022 Project Software.
 *
 * Academic #MisionTIC2022 Project is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * Academic #MisionTIC2022 Project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Academic #MisionTIC2022 Project.
 * If not, see <https://www.gnu.org/licenses/>.
 */

import com.misiontic.unal.securityBackend.models.User;
import com.misiontic.unal.securityBackend.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Optional;

@Service
public class UserServices {
    // Connect services with repository methods
    @Autowired
    private UserRepository userRepository;

    /**
     * This method returns a list of all the users persisted in the application
     * @return users list
     */
    public List<User> index(){
        return (List<User>) this.userRepository.findAll();
    }

    /**
     * This method returns the information of a specific user based on its id.
     * @param id user id
     * @return user information
     */
    public Optional<User> show(int id) {
        Optional<User> result = this.userRepository.findById(id);
        if(result.isEmpty())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    "Requested user does not exist in the database.");
        return result;
    }

    /**
     * This method returns the information of a specific user based on its nickname.
     * @param nickname user nickname
     * @return user information
     */
    public User showByNickname(String nickname) {
        Optional<User> result = this.userRepository.findByNickname(nickname);
        if(result.isEmpty())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    "Requested user does not exist in the database.");
        return result.get();
    }

    /**
     * This method returns the information of a specific user based on its email.
     * @param email user email
     * @return user information
     */
    public User showByEmail(String email) {
        Optional<User> result = this.userRepository.findByEmail(email);
        if(result.isEmpty())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    "Requested user does not exist in the database.");
        return result.get();
    }

    /**
     * This method represents the behavior of the addition of a new user to the application.
     * User needs as mandatory the fields described as follows: email, nickname, and password.
     * @param newUser new user information
     * @return user information after persisted in database
     */
    public ResponseEntity<User> create(User newUser){
        // Check id for new user, it is recommended to be autogenerated
        if(newUser.getId() != null){
            Optional<User> result = this.userRepository.findById(newUser.getId());
            if(result.isPresent())
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "An existing id is provided. Please, remove from request.");
        }

        // Check mandatory fields
        if((newUser.getEmail() != null) && (newUser.getNickname() != null) &&
           (newUser.getPassword() != null) && (newUser.getRol() != null)
        ){
            // Check unique fields
            Optional<User> tempUser = this.userRepository.findByEmail(newUser.getEmail());
            if(tempUser.isPresent())
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "Email is already in the database");
            tempUser = this.userRepository.findByNickname(newUser.getNickname());
            if(tempUser.isPresent())
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "Nickname is already in the database");
            // Encrypt the password
            newUser.setPassword(this.convertToSHA256(newUser.getPassword()));
            // Save if all the checks ran fine
            return new ResponseEntity<>(this.userRepository.save(newUser), HttpStatus.CREATED);
        }
        else
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Mandatory fields have not been provided.");
    }

    /**
     * This method represents the behavior of an update of user information
     * @param id user id
     * @param user user information to update
     * @return updated user
     */
    public ResponseEntity<User> update(int id, User user){
        // Validate id range
        if(id > 0){
            Optional<User> tempUser = this.userRepository.findById(id);
            // Validate if the user exists in the database
            if(tempUser.isPresent()) {
                // Check information to update
                if(user.getNickname() != null)
                    tempUser.get().setNickname(user.getNickname());
                if(user.getPassword() != null)
                    tempUser.get().setPassword( this.convertToSHA256(user.getPassword()) );
                if(user.getRol() != null)
                    tempUser.get().setRol(user.getRol());
                try {
                    // If any database constraint is violated it is going to launch an error
                    return new ResponseEntity<>(this.userRepository.save(tempUser.get()), HttpStatus.CREATED);
                }
                catch(Exception ex){
                    throw new ResponseStatusException(HttpStatus.CONFLICT,
                            "Database is getting a conflict by constraint.");
                }
            }
            else
                throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Requested user does not exists in the database.");
        }
        else
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "User ID cannot be negative.");
    }

    /**
     * This method represents the behavior of a user deletion from the database based on its id
     * @param id user id
     * @return status in boolean
     */
    public ResponseEntity<Boolean> delete(int id){
        Boolean success = this.show(id).map(user -> {
              this.userRepository.delete(user);
              return true;
        }).orElse(false);
        if(success)
            return new ResponseEntity<>(true, HttpStatus.NO_CONTENT);
        else
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
                    "User cannot be deleted. Check if it exists in database.");
    }

    /**
     * This method represents the behavior of a traditional user login.
     * Validates if pair email and password exists together in the database,
     * returning a hashmap with the permission and the user's info; else,
     * it returns a hashmap just with the permission as false.
     * @param user - email and password
     * @return permission result
     */
    public User login(User user){
        User result;
        // Check mandatory fields
        if(user.getPassword() != null && user.getEmail() != null) {
            String email = user.getEmail();
            // Encrypt password
            String password = this.convertToSHA256( user.getPassword() );
            Optional<User> tempUser = this.userRepository.validateLogin(email, password);
            // Check if any user fits with both email and password provided
            if(tempUser.isEmpty())
                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED,
                        "Invalid access.");
            else
                result = tempUser.get();
        }
        else
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Mandatory fields had not been send.");
        return result;
    }


    /**
     * This method takes a simple password and encrypted using SHA-256 algorithm
     * @param password user password
     * @return encrypted password
     */
    public String convertToSHA256(String password){
        MessageDigest md;
        try{
            md = MessageDigest.getInstance("SHA-256");
        }
        catch(NoSuchAlgorithmException e){
            e.printStackTrace();
            return null;
        }
        StringBuffer sb = new StringBuffer();
        byte[] hash = md.digest(password.getBytes());
        for(byte b: hash)
            sb.append( String.format("%02x", b) );
        return sb.toString();
    }
}
