package com.misiontic.unal.securityBackend.services;

/*
 * Copyright: Copyright (c) 2022
 *
 * License
 *
 * Copyright (c) 2022 by Carlos Andres Sierra Virg√ºez.
 * All rights reserved.
 *
 * This file is part of Academic #MisionTIC2022 Project Software.
 *
 * Academic #MisionTIC2022 Project is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * Academic #MisionTIC2022 Project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Academic #MisionTIC2022 Project.
 * If not, see <https://www.gnu.org/licenses/>.
 */

import com.misiontic.unal.securityBackend.models.Permission;
import com.misiontic.unal.securityBackend.repositories.PermissionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Optional;

@Service
public class PermissionServices {
    // Connect services with repository methods
    @Autowired
    private PermissionRepository permissionRepository;

    /**
     * This method returns a list of all the permissions persisted in the application
     * @return permissions list
     */
    public List<Permission> index(){
        return (List<Permission>)this.permissionRepository.findAll();
    }

    /**
     * This method returns the information of a specific permission based on its id.
     * @param id permission id
     * @return permission information
     */
    public Optional<Permission> show(int id){
        Optional<Permission> result = this.permissionRepository.findById(id);
        if(result.isEmpty())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    "Requested permission does not exist in the database.");
        return result;
    }

    /**
     * This method represents the behavior of the addition of a new permission to the application.
     * Permission needs as mandatory the fields described as follows: url and method.
     * @param newPermission new permission information
     * @return permission information after persisted in database
     */
    public ResponseEntity<Permission> create(Permission newPermission){
        // Check id for new permission, it is recommended to be autogenerated
        if(newPermission.getId() != null) {
            Optional<Permission> result = this.permissionRepository.findById(newPermission.getId());
            if (result.isPresent())
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "An existing id is provided. Please, remove from request.");
        }

        // Check mandatory fields
        if(newPermission.getUrl() != null && newPermission.getMethod() != null) {
            // Check unique fields
            Optional<Permission> tempPermission = this.permissionRepository.findByUrl(newPermission.getUrl());
            if(tempPermission.isPresent())
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "URL is already in the database");
            // Save if all the checks ran fine
            return new ResponseEntity<>(this.permissionRepository.save(newPermission), HttpStatus.CREATED);
        }
        else
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Mandatory fields have not been provided.");
    }

    /**
     * This method represents the behavior of an update of the permission information
     * @param id permission id
     * @param updatedPermission permission information to update
     * @return updated permission
     */
    public ResponseEntity<Permission> update(int id, Permission updatedPermission){
        // Validate id range
        if(id > 0){
            Optional<Permission> tempPermission = this.show(id);
            // Validate if permission exists in the database
            if(tempPermission.isPresent()){
                // Check information to update
                if(updatedPermission.getMethod() != null)
                    tempPermission.get().setMethod(updatedPermission.getMethod());
                if(updatedPermission.getUrl() != null)
                    tempPermission.get().setUrl(updatedPermission.getUrl());
                try {
                    // If any database constraint is violated it is going to launch an error
                    return new ResponseEntity<>(this.permissionRepository.save(tempPermission.get()), HttpStatus.CREATED);
                }
                catch(Exception ex){
                    throw new ResponseStatusException(HttpStatus.CONFLICT,
                            "Database is getting a conflict by a constraint.");
                }
            }
            else
                throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Requested permission does not exist in the database.");
        }
        else
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Permission ID cannot be negative.");
    }

    /**
     * This method represents the behavior of a permission deletion from the database based on its id
     * @param id permission id
     * @return status of deletion
     */
    public ResponseEntity<Boolean> delete(int id){
        Boolean success = this.show(id).map(permission -> {
            this.permissionRepository.delete(permission);
            return true;
        }).orElse(false);
        if(success)
            return new ResponseEntity<>(true, HttpStatus.NO_CONTENT);
        else
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,
                    "Permission cannot be deleted. Check if it exists in database.");
    }
}
